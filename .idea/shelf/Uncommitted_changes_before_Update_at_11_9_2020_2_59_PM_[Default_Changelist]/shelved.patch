Index: src/main/java/com/example/demo/Controllers/DatingController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.demo.Controllers;\r\n\r\nimport com.example.demo.Models.Profile;\r\nimport com.example.demo.Repositories.ProfileRepository;\r\nimport org.springframework.stereotype.Controller;\r\nimport org.springframework.ui.Model;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.PostMapping;\r\nimport org.springframework.web.context.request.WebRequest;\r\n\r\nimport java.sql.SQLException;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n@Controller\r\npublic class DatingController {\r\n\r\n    ProfileRepository rp = new ProfileRepository();\r\n    List<Profile> allProfiles = new ArrayList<>();\r\n    List<Profile> searchLogin = new ArrayList<>();\r\n    Profile profile = new Profile(0,null,null,null,null,null, 0, null);\r\n\r\n\r\n    @GetMapping(\"/\")\r\n    public String index(Model profileModel){\r\n        profileModel.addAttribute(\"profile\", rp.listAllProfiles());\r\n        return \"index\";\r\n    }\r\n\r\n    @PostMapping(\"/createprofile\")\r\n    public String createProfile(WebRequest createProfileData) throws SQLException {\r\n        String gender = null;\r\n        int admin = 0;\r\n        String name = createProfileData.getParameter(\"pName\");\r\n        if (createProfileData.getParameter(\"pGender\") == createProfileData.getParameter(\"pGenderMand\")) {\r\n            gender = \"Kvinde\";\r\n        } else {\r\n            gender = \"Mand\";\r\n        }\r\n       // String gender = createProfileData.getParameter(\"pGender\");\r\n        String email = createProfileData.getParameter(\"pEmail\");\r\n        String description = createProfileData.getParameter(\"pDescription\");\r\n        String kodeord = createProfileData.getParameter(\"pKodeord\");\r\n        rp.createProfile(name, kodeord, gender,email,description,admin);\r\n        return \"redirect:/\";\r\n    }\r\n\r\n    @PostMapping(\"/login\")\r\n    public String login(WebRequest loginData) throws SQLException {\r\n    String name = loginData.getParameter(\"pName\");\r\n    String kodeord = loginData.getParameter(\"pKodeord\");\r\n\r\n        System.out.println(rp.searchLogin(name, kodeord).getId());\r\n\r\n        System.out.println(rp.searchLogin(name, kodeord).getAdmin());\r\n\r\n        return \"index\";\r\n    }\r\n\r\n    @PostMapping(\"/deleteprofile\")\r\n    public String deleteProfile(WebRequest deleteProfile) {\r\n        try {\r\n            int id = Integer.parseInt(deleteProfile.getParameter(\"delete\"));\r\n            rp.deleteProfile(id);\r\n        } catch (SQLException throwables) {\r\n            throwables.printStackTrace();\r\n        }\r\n        return \"redirect:/\";\r\n    }\r\n\r\n    @PostMapping(\"/editprofile\")\r\n    public String editProfile(WebRequest editProfile) {\r\n        try {\r\n            String gender = null;\r\n            int id = Integer.parseInt(editProfile.getParameter(\"eId\"));\r\n            String name = editProfile.getParameter(\"eName\");\r\n            //String gender = editProfile.getParameter(\"eGender\");\r\n            if (editProfile.getParameter(\"pGender\") == editProfile.getParameter(\"pGenderMand\")) {\r\n                gender = \"Kvinde\";\r\n            } else {\r\n                gender = \"Mand\";\r\n            }\r\n            String email = editProfile.getParameter(\"eEmail\");\r\n            String description = editProfile.getParameter(\"eDescription\");\r\n            rp.editProfile(id,name,gender,email,description);\r\n        } catch (SQLException throwables) {\r\n            throwables.printStackTrace();\r\n        }\r\n        return \"redirect:/\";\r\n    }\r\n\r\n    @GetMapping(\"searchprofiles\")\r\n    public String searchProfiles(Model searchModel, WebRequest searchProfile){\r\n        String gender = searchProfile.getParameter(\"sGender\");\r\n        try {\r\n            allProfiles = rp.searchProfile(gender);\r\n        } catch (SQLException throwables) {\r\n            throwables.printStackTrace();\r\n        }\r\n        searchModel.addAttribute(\"profile\",allProfiles);\r\n        return \"profileList\";\r\n    }\r\n\r\n    //Login\r\n    @GetMapping(\"/login\")\r\n    public String login(Model model) {\r\n        //model.addAttribute(\"pLogin\", new login());\r\n        //model.addAttribute(\"pName\", \"pKodeord\");\r\n        return \"Login\";\r\n    }\r\n\r\n    /*\r\n   @PostMapping(\"/login\")\r\n    public String login(WebRequest login) throws SQLException {\r\n        String\r\n        model.addAttribute(\"contactForm\", contactForm);\r\n        // Tilf√∏j ArrayList og / eller FileWriter her?\r\n        return \"contactReceipt\";\r\n    } */\r\n\r\n   //         String name = createProfileData.getParameter(\"pName\");\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/example/demo/Controllers/DatingController.java	(revision f8d4f09496078a81b329479918c5f957c8662db9)
+++ src/main/java/com/example/demo/Controllers/DatingController.java	(date 1604927773750)
@@ -18,7 +18,7 @@
     ProfileRepository rp = new ProfileRepository();
     List<Profile> allProfiles = new ArrayList<>();
     List<Profile> searchLogin = new ArrayList<>();
-    Profile profile = new Profile(0,null,null,null,null,null, 0, null);
+    //Profile profile = new Profile(0,null,null,null,null,null, 0, null);
 
 
     @GetMapping("/")
@@ -45,7 +45,7 @@
         return "redirect:/";
     }
 
-    @PostMapping("/login")
+    @PostMapping("/Login")
     public String login(WebRequest loginData) throws SQLException {
     String name = loginData.getParameter("pName");
     String kodeord = loginData.getParameter("pKodeord");
@@ -57,6 +57,14 @@
         return "index";
     }
 
+    //Login
+    @GetMapping("/Login")
+    public String login(Model model) {
+        //model.addAttribute("pLogin", new login());
+        //model.addAttribute("pName", "pKodeord");
+        return "Login";
+    }
+
     @PostMapping("/deleteprofile")
     public String deleteProfile(WebRequest deleteProfile) {
         try {
@@ -101,13 +109,7 @@
         return "profileList";
     }
 
-    //Login
-    @GetMapping("/login")
-    public String login(Model model) {
-        //model.addAttribute("pLogin", new login());
-        //model.addAttribute("pName", "pKodeord");
-        return "Login";
-    }
+
 
     /*
    @PostMapping("/login")
Index: src/main/java/com/example/demo/Repositories/ProfileRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.demo.Repositories;\r\n\r\nimport com.example.demo.Models.Profile;\r\nimport org.springframework.stereotype.Repository;\r\nimport java.sql.Connection;\r\nimport java.sql.DriverManager;\r\nimport java.sql.SQLException;\r\nimport java.sql.ResultSet;\r\nimport java.sql.*;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\n@Repository\r\npublic class ProfileRepository {\r\n\r\n    //liste med alle profiler\r\n    List<Profile> allProfiles = new ArrayList<Profile>();\r\n    List<Profile> searchLogin = new ArrayList<Profile>();\r\n\r\n    //Denne metode laver forbindelsen til mysql databasen\r\n    private Connection establishConnection() throws SQLException {\r\n        Connection connectionToDB = DriverManager.getConnection(\"jdbc:mysql://localhost:3306/dating_app\", \"root\", \"Orange10\");\r\n        return connectionToDB;\r\n    }\r\n\r\n    public List<Profile> listAllProfiles() {\r\n        allProfiles.clear();\r\n        try {\r\n            //lavet et statement og eksekvere en query\r\n            PreparedStatement ps = establishConnection().prepareStatement(\" SELECT * FROM profiles;\");\r\n            ResultSet rs = ps.executeQuery();\r\n\r\n            //lave resultattet om til objekter, og derefter ind i en arrayliste\r\n            while (rs.next()) {\r\n                Profile tmp = new Profile(\r\n                        rs.getInt(1),\r\n                        rs.getString(2),\r\n                        rs.getString(3),\r\n                        rs.getString(4),\r\n                        rs.getString(5),\r\n                        rs.getString(6),\r\n                        rs.getInt(7),\r\n                        rs.getBlob(8));\r\n                allProfiles.add(tmp);\r\n            }\r\n\r\n        } catch (SQLException e) {\r\n            return null;\r\n        }\r\n        return allProfiles;\r\n    }\r\n\r\n\r\n    public void createProfile(String pName, String pKodeord, String pGender, String pEmail, String pDescription, int pAdmin) throws SQLException {\r\n        allProfiles.clear();\r\n        //lavet et statement og eksekvere en query\r\n        PreparedStatement ps = establishConnection().prepareStatement(\"INSERT INTO profiles (name, kodeord, gender,email,description) VALUES (?,?,?,?,?);\");\r\n\r\n        ps.setString(1,pName);\r\n        ps.setString(2, pKodeord);\r\n        ps.setString(3,pGender);\r\n        ps.setString(4,pEmail);\r\n        ps.setString(5,pDescription);\r\n\r\n        int rs = ps.executeUpdate();\r\n\r\n        PreparedStatement pss = establishConnection().prepareStatement(\"SELECT * FROM profiles LIMIT ?,1\");\r\n        pss.setInt(1,rs);\r\n        ResultSet rss = pss.executeQuery();\r\n\r\n        while (rss.next()) {\r\n            Profile temp = new Profile(\r\n                    rss.getInt(1),\r\n                    rss.getString(2),\r\n                    rss.getString(3),\r\n                    rss.getString(4),\r\n                    rss.getString(5),\r\n                    rss.getString(6),\r\n                    rss.getInt(7),\r\n                    rss.getBlob(8));\r\n            allProfiles.add(temp);\r\n\r\n        }\r\n    }\r\n\r\n    public void deleteProfile(int id) throws SQLException {\r\n        PreparedStatement ps = establishConnection().prepareStatement(\"DELETE FROM profiles WHERE id=?\");\r\n        ps.setInt(1,id);\r\n        ps.executeUpdate();\r\n    }\r\n\r\n    public void editProfile(int id, String name, String gender, String email, String description) throws SQLException {\r\n        PreparedStatement ps = establishConnection().prepareStatement(\"UPDATE profiles SET name = ?, gender = ?, email = ?, description = ? where id= ?\");\r\n        ps.setString(1,name);\r\n        ps.setString(2,gender);\r\n        ps.setString(3,email);\r\n        ps.setString(4,description);\r\n        ps.setInt(5,id);\r\n        ps.executeUpdate();\r\n    }\r\n\r\n    public List<Profile> searchProfile(String gender) throws SQLException {\r\n        allProfiles.clear();\r\n        PreparedStatement ps = establishConnection().prepareStatement(\"SELECT * FROM profiles where gender like ?\");\r\n        ps.setString(1,\"%\" + gender + \"%\");\r\n        ResultSet rs = ps.executeQuery();\r\n\r\n        while (rs.next()) {\r\n            Profile temp = new Profile(\r\n                    rs.getInt(1),\r\n                    rs.getString(2),\r\n                    rs.getString(3),\r\n                    rs.getString(4),\r\n                    rs.getString(5),\r\n                    rs.getString(6),\r\n                    rs.getInt(7),\r\n                    rs.getBlob(8));\r\n            allProfiles.add(temp);\r\n        }\r\n        return allProfiles;\r\n    }\r\n\r\n\r\n    public Profile searchLogin(String name, String kodeord) throws SQLException {\r\n        allProfiles.clear();\r\n        PreparedStatement ps = establishConnection().prepareStatement(\"SELECT * FROM profiles where name like ? AND where kodeord = ?\");\r\n        ps.setString(1,\"%\" + name + \"%\");\r\n        ps.setString(2, kodeord);\r\n        ResultSet rs = ps.executeQuery();\r\n\r\n        Profile uniquelogin = null;\r\n        while (rs.next()) {\r\n           uniquelogin = new Profile(\r\n                    rs.getInt(1),\r\n                    rs.getString(2),\r\n                    rs.getString(3),\r\n                    rs.getString(4),\r\n                    rs.getString(5),\r\n                    rs.getString(6),\r\n                    rs.getInt(7),\r\n                    rs.getBlob(8));\r\n\r\n        }\r\n        return uniquelogin;\r\n\r\n        /*\r\n        int i = rs.getInt(1);\r\n        rs.getInt(1);\r\n        rs.getBoolean(2);\r\n        return i;\r\n        */\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/com/example/demo/Repositories/ProfileRepository.java	(revision f8d4f09496078a81b329479918c5f957c8662db9)
+++ src/main/java/com/example/demo/Repositories/ProfileRepository.java	(date 1604927726707)
@@ -19,7 +19,7 @@
 
     //Denne metode laver forbindelsen til mysql databasen
     private Connection establishConnection() throws SQLException {
-        Connection connectionToDB = DriverManager.getConnection("jdbc:mysql://localhost:3306/dating_app", "root", "Orange10");
+        Connection connectionToDB = DriverManager.getConnection("jdbc:mysql://localhost:3306/dating_app", "root", "1");
         return connectionToDB;
     }
 
@@ -123,7 +123,7 @@
 
     public Profile searchLogin(String name, String kodeord) throws SQLException {
         allProfiles.clear();
-        PreparedStatement ps = establishConnection().prepareStatement("SELECT * FROM profiles where name like ? AND where kodeord = ?");
+        PreparedStatement ps = establishConnection().prepareStatement("SELECT * FROM profiles WHERE name = ? AND kodeord = ?");
         ps.setString(1,"%" + name + "%");
         ps.setString(2, kodeord);
         ResultSet rs = ps.executeQuery();
